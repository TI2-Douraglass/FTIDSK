# üîß Ferramenta de Manuten√ß√£o do Sistema - DouraGlass
# Script refatorado: robustez, seguran√ßa e logging

# 1. Modo estrito e declara√ß√£o de erros
Set-StrictMode -Version Latest

# 2. Verificar assinatura digital do script
if ((Get-AuthenticodeSignature $PSCommandPath).Status -ne 'Valid') {
    Write-Error "Script n√£o est√° assinado digitalmente. Abortando."
    exit 1
}

# 3. Configurar fonte de Event Log
$source = 'ManutencaoSistema'
if (-not [System.Diagnostics.EventLog]::SourceExists($source)) {
    New-EventLog -LogName Application -Source $source
}

# 4. Iniciar transcript para auditoria
$scriptName = Split-Path -Path $PSCommandPath -Leaf
$logPath = Join-Path $env:TEMP ("{0}_{1:yyyyMMdd_HHmmss}.log" -f $scriptName, (Get-Date))
Start-Transcript -Path $logPath -Append

# 5. Eleva√ß√£o autom√°tica se n√£o for Administrador
if (-not ([Security.Principal.WindowsPrincipal]::new([Security.Principal.WindowsIdentity]::GetCurrent())
    ).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)) {
    Write-Host "‚è´ Reabrindo script como Administrador..." -ForegroundColor Yellow
    Start-Process pwsh -ArgumentList "-ExecutionPolicy Bypass -NoProfile -File `"$PSCommandPath`"" -Verb RunAs
    Stop-Transcript
    exit
}

# 6. Verificar vers√£o m√≠nima do PowerShell
if ($PSVersionTable.PSVersion -lt [Version]"5.1") {
    Write-Error "PowerShell 5.1 ou superior √© necess√°rio."
    Stop-Transcript
    exit 1
}

# 7. Defini√ß√£o do menu
function Mostrar-Menu {
    Clear-Host
    Write-Host "============================================" -ForegroundColor Cyan
    Write-Host "    üîß FERRAMENTA DE MANUTEN√á√ÉO DO SISTEMA" -ForegroundColor White
    Write-Host "============================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "[1] üîç Verificar arquivos do sistema (SFC)"
    Write-Host "[2] üõ†Ô∏è  Reparo da imagem do sistema (DISM)"
    Write-Host "[3] üíæ Agendar CHKDSK no boot (CHKDSK /F /R)"
    Write-Host "[4] üßπ Limpeza de arquivos tempor√°rios"
    Write-Host "[5] üß™ Verificar status SMART dos discos"
    Write-Host "[6] üåê Diagn√≥stico de rede"
    Write-Host "[7] ‚ôªÔ∏è  Reiniciar Windows Update"
    Write-Host "[8] ‚ùå Sair"
    Write-Host "[9] üñ®Ô∏è  Limpar fila de impress√£o"
    Write-Host ""
}

# 8. Fun√ß√µes de manuten√ß√£o
function Executar-SFC {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üîç Iniciando SFC..." -ForegroundColor Yellow
        sfc /scannow -ErrorAction Stop
        Write-Host "‚úÖ SFC conclu√≠do." -ForegroundColor Green
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 1001 -Message "SFC conclu√≠do com sucesso."
    } catch {
        Write-Error "‚ùå Erro no SFC: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 1002 -Message $_
    }
    Pause
}

function Executar-DISM {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üõ†Ô∏è  Iniciando DISM..." -ForegroundColor Yellow
        Start-Process -FilePath dism.exe -ArgumentList '/Online','/Cleanup-Image','/RestoreHealth' -Verb RunAs -Wait
        Write-Host "‚úÖ DISM conclu√≠do." -ForegroundColor Green
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 2001 -Message "DISM conclu√≠do com sucesso."
    } catch {
        Write-Error "‚ùå Erro no DISM: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 2002 -Message $_
    }
    Pause
}

function Executar-CHKDSK {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üíæ Agendando CHKDSK no pr√≥ximo boot..." -ForegroundColor Yellow
        "Y" | cmd /c "chkdsk C: /F /R"
        Write-Host "‚úÖ CHKDSK agendado." -ForegroundColor Green
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 3001 -Message "CHKDSK agendado para pr√≥ximo boot."
    } catch {
        Write-Error "‚ùå Erro ao agendar CHKDSK: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 3002 -Message $_
    }
    Pause
}

function Executar-Limpeza {
    [CmdletBinding()]
    param()
    $pastas = @($env:TEMP, "$env:windir\Temp")
    foreach ($pasta in $pastas) {
        try {
            Write-Host "üßπ Limpando: $pasta" -ForegroundColor Yellow
            Get-ChildItem -Path $pasta -Recurse -Force -ErrorAction SilentlyContinue `
                | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
            Write-Host "‚úÖ Limpeza de $pasta conclu√≠da." -ForegroundColor Green
            Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 4001 -Message "Limpeza de $pasta conclu√≠da."
        } catch {
            Write-Error "‚ùå Erro ao limpar ${pasta}: $_"
            Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 4002 -Message $_
        }
    }
    Pause
}

function Verificar-SMART {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üß™ Verificando SMART dos discos..." -ForegroundColor Yellow
        Get-WmiObject -Class Win32_DiskDrive | Select-Object Model, Status
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 5001 -Message "Verifica√ß√£o SMART conclu√≠da."
    } catch {
        Write-Error "‚ùå Erro no SMART: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 5002 -Message $_
    }
    Pause
}

function Diagnostico-Rede {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üåê Iniciando diagn√≥stico de rede..." -ForegroundColor Yellow
        ipconfig /release
        ipconfig /renew
        ipconfig /flushdns
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 6001 -Message "Diagn√≥stico de rede conclu√≠do."
    } catch {
        Write-Error "‚ùå Erro no diagn√≥stico de rede: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 6002 -Message $_
    }
    Pause
}

function Reiniciar-WU {
    [CmdletBinding()]
    param()
    try {
        Write-Host "‚ôªÔ∏è  Reiniciando Windows Update..." -ForegroundColor Yellow
        $services = "wuauserv","cryptSvc","bits","msiserver"
        foreach ($svc in $services) { Stop-Service -Name $svc -Force -ErrorAction SilentlyContinue }
        Rename-Item "$env:windir\SoftwareDistribution" "SoftwareDistribution.old" -ErrorAction SilentlyContinue
        Rename-Item "$env:windir\System32\catroot2" "catroot2.old" -ErrorAction SilentlyContinue
        foreach ($svc in $services) { Start-Service -Name $svc -ErrorAction SilentlyContinue }
        Write-Host "‚úÖ Windows Update reiniciado." -ForegroundColor Green
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 7001 -Message "Windows Update reiniciado."
    } catch {
        Write-Error "‚ùå Erro ao reiniciar Windows Update: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 7002 -Message $_
    }
    Pause
}

function Resetar-Spooler {
    [CmdletBinding()]
    param(
        [string] $PrinterName  # opcional, se quiser focar em s√≥ uma impressora
    )
    try {
        Write-Host "üñ®Ô∏è  Parando servi√ßo de impress√£o..." -ForegroundColor Yellow
        Stop-Service Spooler -Force

        Write-Host "üî™ Matando processos remanescentes..." -ForegroundColor Yellow
        Get-Process spoolsv -ErrorAction SilentlyContinue | Stop-Process -Force

        Write-Host "üóëÔ∏è  Limpando arquivos de spool..." -ForegroundColor Yellow
        Remove-Item -Path "$env:WINDIR\System32\spool\PRINTERS\*" -Force -Recurse -ErrorAction SilentlyContinue

        if ($PrinterName) {
            Write-Host "‚ùå Removendo driver da impressora $PrinterName..." -ForegroundColor Yellow
            # Remove-Printer s√≥ existe no Windows 8+/Server 2012+
            Remove-Printer -Name $PrinterName -ErrorAction SilentlyContinue
            # (re)instalar driver pode ser feito aqui se voc√™ tiver o INF dispon√≠vel:
            # Add-Printer -Name $PrinterName -DriverName "NomeDoDriver" -PortName "PORTA"
        }

        Write-Host "‚ñ∂Ô∏è  Reiniciando servi√ßo de impress√£o..." -ForegroundColor Yellow
        Start-Service Spooler

        Write-Host "‚úÖ Spooler resetado." -ForegroundColor Green
    } catch {
        Write-Error "‚ùå Falha ao resetar spooler: $_"
    }
    Pause
}


function Agendar-Tarefa {
    [CmdletBinding()]
    param()
    try {
        Write-Host "üìÖ Agendando limpeza di√°ria..." -ForegroundColor Yellow
        $action = New-ScheduledTaskAction -Execute 'PowerShell.exe' -Argument "-NoProfile -WindowStyle Hidden -ExecutionPolicy Bypass -Command \`"Get-ChildItem -Path `$env:TEMP -Recurse -Force | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue; Get-ChildItem -Path `$env:windir\Temp -Recurse -Force | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue\`""
        $trigger = New-ScheduledTaskTrigger -Daily -At 4am
        $principal = New-ScheduledTaskPrincipal -UserId 'SYSTEM' -LogonType ServiceAccount -RunLevel Highest
        $task = New-ScheduledTask -Action $action -Trigger $trigger -Principal $principal
        Register-ScheduledTask -TaskName 'LimpezaDiaria_TEMP' -InputObject $task -Force
        Write-Host "‚úÖ Tarefa agendada: LimpezaDiaria_TEMP" -ForegroundColor Green
        Write-EventLog -LogName Application -Source $source -EntryType Information -EventId 8001 -Message "Tarefa LimpezaDiaria_TEMP agendada."
    } catch {
        Write-Error "‚ùå Falha ao agendar tarefa: $_"
        Write-EventLog -LogName Application -Source $source -EntryType Error -EventId 8002 -Message $_
    }
    Pause
}

# Loop principal
do {
    Mostrar-Menu
    $opcao = Read-Host "Escolha uma op√ß√£o"

    switch ($opcao) {
        '1' { Executar-SFC }
        '2' { Executar-DISM }
        '3' { Executar-CHKDSK }
        '4' { Executar-Limpeza }
        '5' { Verificar-SMART }
        '6' { Diagnostico-Rede }
        '7' { Reiniciar-WU }
        '8' { Stop-Transcript; exit }
        '9' { Limpar-FilaImpressao }
        Default {
            Write-Host "‚ùó Op√ß√£o inv√°lida." -ForegroundColor Red
            Start-Sleep -Seconds 2
        }
    }
} while ($true)
