#requires -RunAsAdministrator

# ----------------------------------------------------------------------------------
# üîß Ferramenta de Manuten√ß√£o do Sistema - DouraGlass (Vers√£o Melhorada)
# Descri√ß√£o: Um script PowerShell para realizar tarefas comuns de manuten√ß√£o do sistema.
# Autor: Seu Nome/DouraGlass
# Vers√£o: 2.0
# ----------------------------------------------------------------------------------

# Configura√ß√µes iniciais da janela do PowerShell
$Host.UI.RawUI.WindowTitle = "üîß Ferramenta de Manuten√ß√£o do Sistema - DouraGlass v2.0"
$Host.UI.RawUI.ForegroundColor = "Yellow"
$Host.UI.RawUI.BackgroundColor = "DarkBlue"
Clear-Host

# --- Fun√ß√µes do Menu ---

function Mostrar-Menu {
    Clear-Host
    Write-Host "============================================" -ForegroundColor Cyan
    Write-Host "   üîß FERRAMENTA DE MANUTEN√á√ÉO DO SISTEMA" -ForegroundColor White
    Write-Host "============================================" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "--- SISTEMA ---" -ForegroundColor Green
    Write-Host "[1] üîç Verificar arquivos do sistema (SFC)"
    Write-Host "[2] üõ†Ô∏è  Reparo da imagem do sistema (DISM)"
    Write-Host ""
    Write-Host "--- DISCO ---" -ForegroundColor Green
    Write-Host "[3] üíæ Verificar disco (CHKDSK no disco C:)"
    Write-Host "[4] üßπ Limpeza de arquivos tempor√°rios"
    Write-Host "[5] üß™ Verificar status SMART do disco"
    Write-Host ""
    Write-Host "--- REDE E ATUALIZA√á√ïES ---" -ForegroundColor Green
    Write-Host "[6] üåê Diagn√≥stico de rede"
    Write-Host "[7] ‚ôªÔ∏è  Reiniciar servi√ßo do Windows Update"
    Write-Host ""
    Write-Host "--- OUTROS ---" -ForegroundColor Green
    Write-Host "[9] üìÖ Agendar tarefa de limpeza"
    Write-Host ""
    Write-Host "--- SAIR ---"
    Write-Host "[8] ‚ùå Sair"
    Write-Host ""
}

# --- Fun√ß√µes de Execu√ß√£o ---

function Executar-SFC {
    Clear-Host
    Write-Host "üîç Executando verifica√ß√£o do sistema (SFC)... Isso pode demorar." -ForegroundColor Yellow
    
    # Documenta√ß√£o: Executa o System File Checker e captura o resultado.
    $resultado = sfc /scannow
    
    # Documenta√ß√£o: Verifica o c√≥digo de sa√≠da do √∫ltimo comando executado. 0 significa sucesso.
    if ($LASTEXITCODE -eq 0) {
        Write-Host "‚úîÔ∏è Verifica√ß√£o SFC conclu√≠da com sucesso. Nenhum problema encontrado." -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è A verifica√ß√£o SFC encontrou problemas. Verifique o log para mais detalhes:" -ForegroundColor Yellow
        Write-Host "$env:windir\Logs\CBS\CBS.log"
    }
    Pause
}

function Executar-DISM {
    Clear-Host
    Write-Host "üõ†Ô∏è  Executando reparo da imagem do sistema (DISM)... Isso pode ser demorado." -ForegroundColor Yellow
    
    # Documenta√ß√£o: Executa o DISM diretamente, pois o script j√° est√° em modo administrador.
    # Usamos /ScanHealth primeiro para uma verifica√ß√£o r√°pida.
    Write-Host "Passo 1/2: Verificando a sa√∫de da imagem..." -ForegroundColor Cyan
    DISM /Online /Cleanup-Image /ScanHealth

    if ($LASTEXITCODE -eq 0) {
        Write-Host "Passo 2/2: Restaurando a sa√∫de da imagem..." -ForegroundColor Cyan
        DISM /Online /Cleanup-Image /RestoreHealth
        if ($LASTEXITCODE -eq 0) {
            Write-Host "‚úîÔ∏è Reparo da imagem DISM conclu√≠do com sucesso." -ForegroundColor Green
        } else {
            Write-Host "‚ùå Falha ao restaurar a imagem com o DISM. Verifique o log para detalhes." -ForegroundColor Red
        }
    } else {
        Write-Host "‚ùå Falha ao verificar a sa√∫de da imagem com o DISM." -ForegroundColor Red
    }
    Pause
}

function Executar-CHKDSK {
    Clear-Host
    Write-Host "üíæ Agendando verifica√ß√£o do disco C: na pr√≥xima reinicializa√ß√£o (CHKDSK /F /R)..." -ForegroundColor Yellow
    
    # Documenta√ß√£o: O comando fsutil dirty query C: verifica se o disco j√° est√° "sujo" (agendado para verifica√ß√£o).
    fsutil dirty query C:
    
    # Documenta√ß√£o: Executa o CHKDSK. Ele pedir√° para agendar se o disco estiver em uso.
    chkdsk C: /f /r
    
    Write-Host "`nO CHKDSK foi executado ou agendado. Se necess√°rio, reinicie o computador para iniciar a verifica√ß√£o." -ForegroundColor Green
    Pause
}

function Executar-Limpeza {
    Clear-Host
    Write-Host "üßπ Limpando arquivos tempor√°rios..." -ForegroundColor Yellow
    
    $pastas = @(
        $env:TEMP,
        "$env:windir\Temp"
    )
    
    foreach ($pasta in $pastas) {
        if (Test-Path -Path $pasta) {
            Write-Host "`nüóÇÔ∏è  Limpando pasta: $pasta" -ForegroundColor Cyan
            try {
                Get-ChildItem -Path $pasta -Recurse -Force | Remove-Item -Recurse -Force -ErrorAction Stop
                Write-Host "‚úîÔ∏è  Limpeza de $pasta conclu√≠da." -ForegroundColor Green
            } catch {
                # --- CORRE√á√ÉO APLICADA AQUI ---
                # Documenta√ß√£o: Usamos $($_.Exception.Message) para inserir a mensagem de erro de forma segura na string.
                # Acessar a propriedade .Exception.Message fornece uma mensagem mais limpa do que usar apenas $_.
                Write-Host "‚ö†Ô∏è  N√£o foi poss√≠vel limpar todos os arquivos em $pasta. Alguns podem estar em uso, o que √© normal." -ForegroundColor Yellow
                Write-Host ("   Detalhe do erro: $($_.Exception.Message)") -ForegroundColor Gray
            }
        } else {
            Write-Host "‚ÑπÔ∏è  A pasta $pasta n√£o existe." -ForegroundColor Gray
        }
    }
    Pause
}

function Verificar-SMART {
    Clear-Host
    Write-Host "üß™ Verificando status SMART dos discos..." -ForegroundColor Yellow
    
    try {
        # Documenta√ß√£o: Get-CimInstance √© a forma moderna de consultar o WMI.
        # -ErrorAction Stop garante que, se o comando falhar, o 'catch' ser√° executado.
        Get-CimInstance -ClassName Win32_DiskDrive | Select-Object -Property Model, @{Name="Status"; Expression={if($_.Status -eq 'OK'){"‚úîÔ∏è OK"} else {"‚ùå ERRO"}}}
    } catch {
        Write-Host "‚ùå N√£o foi poss√≠vel verificar o status SMART. O comando falhou." -ForegroundColor Red
    }
    Pause
}

function Diagnostico-Rede {
    Clear-Host
    Write-Host "üåê Executando diagn√≥stico de rede..." -ForegroundColor Yellow
    
    Write-Host "`n[1/3] Liberando concess√£o de IP..." -ForegroundColor Cyan
    ipconfig /release
    
    Write-Host "`n[2/3] Renovando concess√£o de IP..." -ForegroundColor Cyan
    ipconfig /renew
    
    Write-Host "`n[3/3] Limpando cache de DNS..." -ForegroundColor Cyan
    ipconfig /flushdns
    
    Write-Host "`n‚úîÔ∏è Diagn√≥stico de rede conclu√≠do." -ForegroundColor Green
    Pause
}

function Reiniciar-WU {
    Clear-Host
    Write-Host "‚ôªÔ∏è  Reiniciando componentes do Windows Update..." -ForegroundColor Yellow
    
    # Documenta√ß√£o: Nomes dos servi√ßos a serem manipulados.
    $services = "wuauserv", "cryptSvc", "bits", "msiserver"
    $pastasRenomear = @{
        "C:\Windows\SoftwareDistribution" = "C:\Windows\SoftwareDistribution.old";
        "C:\Windows\System32\catroot2"   = "C:\Windows\System32\catroot2.old"
    }
    
    try {
        # Documenta√ß√£o: Usamos Stop-Service, um cmdlet nativo do PowerShell. -Force tenta parar mesmo se houver depend√™ncias.
        Stop-Service -Name $services -Force -ErrorAction Stop

        Write-Host "Servi√ßos parados. Renomeando pastas de cache..." -ForegroundColor Cyan
        
        # Documenta√ß√£o: Renomeia as pastas de cache do Windows Update.
        foreach ($origem, $destino in $pastasRenomear.GetEnumerator()) {
            if (Test-Path $destino) {
                Remove-Item -Path $destino -Recurse -Force -ErrorAction SilentlyContinue
            }
            if (Test-Path $origem) {
                Rename-Item -Path $origem -NewName $destino -ErrorAction SilentlyContinue
            }
        }
        
        Write-Host "Pastas renomeadas. Reiniciando servi√ßos..." -ForegroundColor Cyan
        # Documenta√ß√£o: Reinicia os servi√ßos usando Start-Service.
        Start-Service -Name $services -ErrorAction Stop

        Write-Host "`n‚úîÔ∏è  Windows Update redefinido com sucesso." -ForegroundColor Green
    } catch {
        Write-Host "`n‚ùå Falha ao reiniciar os componentes do Windows Update." -ForegroundColor Red
        Write-Host ("   Detalhe do erro: $($_.Exception.Message)") -ForegroundColor Gray
    }
    Pause
}

function Agendar-Tarefa {
    Clear-Host
    Write-Host "üìÖ MENU DE AGENDAMENTO DE TAREFAS" -ForegroundColor Cyan
    Write-Host "`n[1] Agendar limpeza di√°ria de arquivos tempor√°rios √†s 04:00"
    Write-Host "[0] Voltar ao menu principal"
    $escolha = Read-Host "`nEscolha uma op√ß√£o"

    switch ($escolha) {
        "1" {
            # Documenta√ß√£o: Usar ProgramData √© mais seguro do que a raiz C:\
            $pastaAgendada = Join-Path -Path $env:ProgramData -ChildPath "DouraGlassMaintenance"
            if (-not (Test-Path $pastaAgendada)) {
                New-Item -Path $pastaAgendada -ItemType Directory | Out-Null
            }
            $scriptPath = Join-Path -Path $pastaAgendada -ChildPath "limpeza.ps1"

            # Documenta√ß√£o: Script de limpeza que ser√° executado pela tarefa agendada.
            # √â uma vers√£o simplificada da fun√ß√£o Executar-Limpeza.
            $scriptLimpeza = @'
# Script de limpeza autom√°tica
$pastas = @($env:TEMP, "$env:windir\Temp")
foreach ($pasta in $pastas) {
    if (Test-Path $pasta) {
        Get-ChildItem -Path $pasta -Recurse -Force -ErrorAction SilentlyContinue | Remove-Item -Force -Recurse -ErrorAction SilentlyContinue
    }
}
'@
            Set-Content -Path $scriptPath -Value $scriptLimpeza -Encoding UTF8

            $action    = New-ScheduledTaskAction -Execute "powershell.exe" -Argument "-ExecutionPolicy Bypass -NoProfile -File `"$scriptPath`""
            $trigger   = New-ScheduledTaskTrigger -Daily -At 4:00AM
            $principal = New-ScheduledTaskPrincipal -UserId "NT AUTHORITY\SYSTEM" -RunLevel Highest
            $settings  = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
            $task      = New-ScheduledTask -Action $action -Trigger $trigger -Principal $principal -Settings $settings

            try {
                Register-ScheduledTask -TaskName "DouraGlass_Limpeza_TEMP_Diaria" -InputObject $task -Force -ErrorAction Stop
                Write-Host "`n‚úîÔ∏è  Tarefa agendada com sucesso! Ser√° executada todos os dias √†s 04:00." -ForegroundColor Green
            } catch {
                Write-Host "`n‚ùå Falha ao agendar a tarefa." -ForegroundColor Red
                Write-Host ("   Detalhe do erro: $($_.Exception.Message)") -ForegroundColor Gray
            }
            Pause
        }
        "0" { return }
        Default {
            Write-Host "`n‚ùå Op√ß√£o inv√°lida. Tente novamente." -ForegroundColor Red
            Start-Sleep -Seconds 2
        }
    }
}

# --- Loop Principal do Script ---

do {
    Mostrar-Menu
    $opcao = Read-Host "Escolha uma op√ß√£o"

    switch ($opcao) {
        "1" { Executar-SFC }
        "2" { Executar-DISM }
        "3" { Executar-CHKDSK }
        "4" { Executar-Limpeza }
        "5" { Verificar-SMART }
        "6" { Diagnostico-Rede }
        "7" { Reiniciar-WU }
        "8" { Write-Host "Saindo..."; exit }
        "9" { Agendar-Tarefa }
        Default {
            Write-Host ""; Write-Host "‚ùó Op√ß√£o inv√°lida. Por favor, escolha um n√∫mero do menu." -ForegroundColor Red
            Start-Sleep -Seconds 2
        }
    }
} while ($true)
